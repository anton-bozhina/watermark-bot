# TODO: –° –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –≤–∞—Ç–µ—Ä–º–∞—Ä —Å –¥—Ä—É–≥–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π

import telebot
import json
import logging
from logging.handlers import RotatingFileHandler
from random import randint
from datetime import date
from pathlib import Path
from telebot import apihelper
from telebot import types

from createwmark import WATERMARKS, INPUT_PATH, OUTPUT_PATH, MAIN_PATH, PERCENTAGE, \
    make_image, get_relative_path, save_image_settings, load_image_settings

bot = telebot.TeleBot('1234567890')
apihelper.proxy = {'https': 'socks5://10.10.10.5:9050'}

telebot.logger.setLevel(logging.INFO)

file_handler = RotatingFileHandler(u'' + str(MAIN_PATH / 'createwmark.log'),
                                   maxBytes=1000000, backupCount=10, encoding='utf8')
file_handler.setLevel(logging.INFO)

con_handler = logging.StreamHandler()
con_handler.setLevel(logging.INFO)

formatter = logging.Formatter(u'[%(asctime)s] %(levelname)s - (%(filename)s:%(lineno)d) %(message)s')
file_handler.setFormatter(formatter)
con_handler.setFormatter(formatter)

telebot.logger.addHandler(file_handler)
telebot.logger.addHandler(con_handler)

MESSAGES = {
    'start': '–ü—Ä–∏–≤–µ—Ç, {}! ‚ò∫ –û—á–µ–Ω—å —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã –∑–∞—Ö–æ—Ç–µ–ª –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–µ–π –ø–æ–º–æ—â—å—é!\n\n'
             '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üåÑ –∏ —è –ø–æ—Å—Ç–∞–≤–ª—é –Ω–∞ –Ω–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫. '
             '–ì–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–±—É–¥—å, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—É–¥—É—Ç –≤ –ø–ª–æ—Ö–æ–º –∫–∞—á–µ—Å—Ç–≤–µ, '
             '–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ, –Ω–∞–∂–º–∏—Ç–µ "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å". '
             '–¢–∞–∫ –∂–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏ —Å—É—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, '
             '–ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
    'whitelist': '–ò–∑–≤–∏–Ω–∏, {}, –Ω–æ –º–Ω–µ –Ω–µ–ª—å–∑—è —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è... üò¢',
}

STICKERS = {
    'hello': 'CAACAgIAAxkBAAMDXo7fcQcL3jCR_xQ3PHRMr68ighQAAgEBAAJWnb0KIr6fDrjC5jQYBA',
    'shrugging': 'CAACAgIAAxkBAANAXo7vD3zOBMuAO74Z4Wb7SaIXUjAAAvkAA1advQqVZW6rKisbNhgE',
}

RANDOM_STICKERS = [
    'CAACAgIAAxkBAAIBzV6QKUnFa1e4pWZDFyk-g2a6uQvpAALyAANWnb0KEJ2LdlN60mQYBA',
    'CAACAgIAAxkBAAIBzl6QKU08xBsUIjyjmnW7ItjYY7ihAAIEAQACVp29Ct4E0XpmZvdsGAQ',
    'CAACAgIAAxkBAAIBz16QKU6F5RWkr4n99CMlVmWljqoCAAL-AANWnb0K2gRhMC751_8YBA',
    'CAACAgIAAxkBAAIB0F6QKVH1OWL58kF4M5twmXFdEUkvAAIBAQACVp29CiK-nw64wuY0GAQ',
    'CAACAgIAAxkBAAIB0V6QKVU0YvK6ynyWKlMpMM4TEYUMAAL0AANWnb0KEViw9dn9VUkYBA',
    'CAACAgIAAxkBAAIB0l6QKVcKA3eCLsrc44NdROj3mIlVAAL2AANWnb0K99tOIUA-pYoYBA',
    'CAACAgIAAxkBAAIB016QKVhS1XZtEfZ-oL11wy9LIYIEAAL3AANWnb0KC3IkHUj0DTAYBA',
    'CAACAgIAAxkBAAIB1F6QKVwhVAdpj6HorX1p6H-ATZwmAAIHAQACVp29Cr-3JmEik7miGAQ',
    'CAACAgIAAxkBAAIB1V6QKV8D2wxZknlShRLvMOopSrR1AAIFAQACVp29Crfk_bYORV93GAQ',
    'CAACAgIAAxkBAAIB1l6QKWN_y2B82o1nNGDWcLUx_04KAAL6AANWnb0KR976l3F0cQEYBA',
    'CAACAgIAAxkBAAIB116QKW_yvJI7dLE4mM2rMVLp8731AAINAQACVp29Ckb9Qx0FRNeXGAQ',
    'CAACAgIAAxkBAAIB2F6QKXThZZWS1jrpL3TmmU-na-BGAALaAQACVp29CpusqfDD0FWIGAQ',
    'CAACAgIAAxkBAAIB2V6QKXf1AokjReBB6ycj0Ji1s1gjAAICAQACVp29Ck7ibIHLQOT_GAQ',
]

POSITIONS = {
    'topleft': '‚Üñ',
    'topcenter': 'Ô∏è‚¨Ü',
    'topright': '‚Üó',
    'centerleft': 'Ô∏èÔ∏è‚¨ÖÔ∏è',
    'center': '‚è∫',
    'centerright': '‚û°',
    'bottomleft': '‚Üô',
    'bottomcenter': 'Ô∏èÔ∏è‚¨á',
    'bottomright': 'Ô∏è‚ÜòÔ∏è',
}


# –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
def delete_old_files(chat_id):
    work_dir = Path(OUTPUT_PATH / str(chat_id))
    Path(work_dir).mkdir(parents=True, exist_ok=True)
    for file in work_dir.iterdir():
        timestamp = date.fromtimestamp(file.stat().st_mtime)
        if date.today() != timestamp:
            file.unlink()

    work_dir = Path(INPUT_PATH / str(chat_id))
    Path(work_dir).mkdir(parents=True, exist_ok=True)
    for file in work_dir.iterdir():
        timestamp = date.fromtimestamp(file.stat().st_mtime)
        if date.today() != timestamp:
            file.unlink()


# –¢—É—Ç –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∫–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞,
# –∏–º—è —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
def position_markup(call_data=''):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(POSITIONS['topleft'],
                                   callback_data='empty' if call_data == 'position:topleft'
                                   else 'position:topleft'),
        types.InlineKeyboardButton(POSITIONS['topcenter'],
                                   callback_data='empty' if call_data == 'position:topcenter'
                                   else 'position:topcenter'),
        types.InlineKeyboardButton(POSITIONS['topright'],
                                   callback_data='empty' if call_data == 'position:topright'
                                   else 'position:topright'),
    )
    markup.row(
        types.InlineKeyboardButton(POSITIONS['centerleft'],
                                   callback_data='empty' if call_data == 'position:centerleft'
                                   else 'position:centerleft'),
        types.InlineKeyboardButton(POSITIONS['center'],
                                   callback_data='empty' if call_data == 'position:center'
                                   else 'position:center'),
        types.InlineKeyboardButton(POSITIONS['centerright'],
                                   callback_data='empty' if call_data == 'position:centerright'
                                   else 'position:centerright'),
    )
    markup.row(
        types.InlineKeyboardButton(POSITIONS['bottomleft'],
                                   callback_data='empty' if call_data == 'position:bottomleft'
                                   else 'position:bottomleft'),
        types.InlineKeyboardButton(POSITIONS['bottomcenter'],
                                   callback_data='empty' if call_data == 'position:bottomcenter'
                                   else 'position:bottomcenter'),
        types.InlineKeyboardButton(POSITIONS['bottomright'],
                                   callback_data='empty' if call_data == 'position:bottomright'
                                   else 'position:bottomright'),
    )
    markup.row(
        types.InlineKeyboardButton('üîΩ –°–∫–∞—á–∞—Ç—å', callback_data='download:edit_position'),
        types.InlineKeyboardButton('–î–∞–ª—å—à–µ ‚ñ∂Ô∏è', callback_data='edit_watermark'),
    )
    return markup


# –¢—É—Ç —Ñ–æ—Ä–º–∏—Ä—É—Ç–µ—Å—è –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
def color_markup(call_data=''):
    markup = types.InlineKeyboardMarkup()

    markup.row_width = 2

    row_colors = list()
    for name in list(WATERMARKS.values()):
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Ö –∂–µ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
        if call_data != name['file']:
            row_colors.append(types.InlineKeyboardButton(name['name'],
                                                         callback_data='watermark:' + name['file']))
        else:
            row_colors.append(types.InlineKeyboardButton(text='‚öúÔ∏è ' + name['name'] + ' ‚öúÔ∏è', callback_data='empty'))
    markup.add(*row_colors)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ç–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π, –∏–º—è —Ñ–∞–π–ª–∞.
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ —Ü–≤–µ—Ç.
    markup.row(
        types.InlineKeyboardButton('‚óÄÔ∏èÔ∏è –ù–∞–∑–∞–¥', callback_data='edit_position'),
        types.InlineKeyboardButton('üîΩ –°–∫–∞—á–∞—Ç—å', callback_data='download:edit_watermark'),
        types.InlineKeyboardButton('–î–∞–ª—å—à–µ ‚ñ∂Ô∏è', callback_data='edit_image')
    )

    return markup


def image_markup(call_data=''):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('Ô∏è‚óÄÔ∏è',
                                   callback_data='image:saturation:reduce'),
        types.InlineKeyboardButton('–¶–≤–µ—Ç',
                                   callback_data='image:saturation:reset'),
        types.InlineKeyboardButton('‚ñ∂',
                                   callback_data='image:saturation:add'),
    )
    markup.row(
        types.InlineKeyboardButton('Ô∏è‚óÄÔ∏è',
                                   callback_data='image:contrast:reduce'),
        types.InlineKeyboardButton('–ö–æ–Ω—Ç—Ä–∞—Å—Ç',
                                   callback_data='image:contrast:reset'),
        types.InlineKeyboardButton('‚ñ∂',
                                   callback_data='image:contrast:add'),
    )
    markup.row(
        types.InlineKeyboardButton('Ô∏è‚óÄÔ∏è',
                                   callback_data='image:brightness:reduce'),
        types.InlineKeyboardButton('–Ø—Ä–∫–æ—Å—Ç—å',
                                   callback_data='image:brightness:reset'),
        types.InlineKeyboardButton('‚ñ∂',
                                   callback_data='image:brightness:add'),
    )
    markup.row(
        types.InlineKeyboardButton('Ô∏è‚óÄÔ∏è',
                                   callback_data='image:sharpness:reduce'),
        types.InlineKeyboardButton('–†–µ–∑–∫–æ—Å—Ç—å',
                                   callback_data='image:sharpness:reset'),
        types.InlineKeyboardButton('‚ñ∂',
                                   callback_data='image:sharpness:add'),
    )
    markup.row(
        types.InlineKeyboardButton('üîÖ',
                                   callback_data='image:mark_size:20'),
        types.InlineKeyboardButton('–†–∞–∑–º–µ—Ä',
                                   callback_data='image:mark_size:30'),
        types.InlineKeyboardButton('üîÜ',
                                   callback_data='image:mark_size:40'),
    )
    markup.row(
        types.InlineKeyboardButton('‚óÄÔ∏èÔ∏è –ù–∞–∑–∞–¥', callback_data='edit_watermark'),
        types.InlineKeyboardButton('üîΩ –°–∫–∞—á–∞—Ç—å', callback_data='download:edit_position'),
    )
    return markup


# –ö–æ–≥–¥–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å, —Ç–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω—é –Ω–∞–∑–∞–¥. –°–¥–µ–ª–∞–Ω–æ, —á—Ç–æ –±—ã –º–µ–Ω—å—à–µ –º–µ—Å—Ç–∞ –±—ã–ª–æ –∑–∞–Ω—è—Ç–æ.
def download_markup(call_data):
    markup = types.InlineKeyboardMarkup()

    markup.row(
        types.InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data=call_data),
    )

    return markup


def edit_message(chat_id=None, message_id=None, reply_markup=None, media=None):
    try:
        bot.edit_message_media(chat_id=chat_id, message_id=message_id,
                               reply_markup=reply_markup,
                               media=media)
    except Exception as e:
        telebot.logger.error(e)


@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id

    telebot.logger.info('User {name} ({chat_id}) start using bot.'.format(name=message.chat.username,
                                                                          chat_id=chat_id))

    bot.send_chat_action(chat_id, 'typing')
    bot.send_message(chat_id, MESSAGES['start'].format(message.chat.first_name))
    bot.send_sticker(chat_id, STICKERS['hello'])


def content_check(message):
    return message.document is not None and message.document.mime_type == 'image/jpeg' or \
           message.document is not None and message.document.mime_type == 'image/png' or \
           message.photo is not None


@bot.message_handler(func=content_check, content_types=['photo', 'document'])
def save_photo(message):
    # –¢–µ–ª–µ–≥—Ä–∞–º —Å–∂–∏–º–∞–µ—Ç —Ñ–æ—Ç–∫–∏ –≤ 2-3 —Ä–∞–∑–º–µ—Ä–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –±–æ–ª—å—à—É—é (-1)
    chat_id = message.chat.id

    bot.send_chat_action(chat_id, 'typing')

    if message.document is None:
        file_id = message.photo[-1].file_id
    else:
        file_id = message.document.file_id

    bot.delete_message(chat_id=chat_id, message_id=message.message_id)

    file_file = bot.get_file(file_id)

    downloaded_file = bot.download_file(file_file.file_path)
    
    last_message = bot.send_photo(chat_id, downloaded_file,
                                  reply_markup=position_markup(),
                                  caption='üìù –í –∫–∞–∫–æ–º –º–µ—Å—Ç–µ –±—É–¥–µ—Ç –ø–µ—á–∞—Ç—å?')

    file_name = str(last_message.message_id) + Path(file_file.file_path).suffix
    save_path = str(INPUT_PATH / str(chat_id) / file_name)

    Path(save_path).parent.mkdir(parents=True, exist_ok=True)

    save_image_settings(chat_id, last_message.message_id, 'file_id', file_id)
    save_image_settings(chat_id, last_message.message_id, 'file', file_name)

    with open(save_path, 'wb') as new_file:
        new_file.write(downloaded_file)

        telebot.logger.info('Save image to {image} from {name} ({chat_id}).'.format(name=message.chat.username,
                                                                                    image=get_relative_path(save_path),
                                                                                    chat_id=message.chat.id))
    Path(MAIN_PATH / 'messages').mkdir(parents=True, exist_ok=True)
    
    with open(str(MAIN_PATH / 'messages' / str(chat_id)), 'w+') as last_message_file:
        last_message_file.write(json.dumps(last_message.json, indent=2))


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    call_data = call.data

    if call_data.startswith('edit_position'):
        if Path(INPUT_PATH / str(chat_id) / (str(message_id) + '.json')).is_file():
            output_file = make_image(chat_id, message_id)

            edit_message(chat_id=chat_id, message_id=message_id,
                         reply_markup=position_markup(call_data),
                         media=types.InputMediaPhoto(output_file, caption='üìù –í –∫–∞–∫–æ–º –º–µ—Å—Ç–µ –±—É–¥–µ—Ç –ø–µ—á–∞—Ç—å?'))
        else:
            bot.edit_message_caption('ü•∫ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª —É–∂–µ –Ω–µ–ª—å–∑—è...',
                                     chat_id=chat_id, message_id=message_id)

    elif call_data.startswith('position:'):
        if Path(INPUT_PATH / str(chat_id) / (str(message_id) + '.json')).is_file():
            save_image_settings(chat_id, message_id,
                                key=call_data.split(':')[0],
                                value=call_data.split(':')[1])

            output_file = make_image(chat_id, message_id)

            edit_message(chat_id=chat_id, message_id=message_id,
                         reply_markup=position_markup(call_data),
                         media=types.InputMediaPhoto(output_file, caption='üìù –í –∫–∞–∫–æ–º –º–µ—Å—Ç–µ –±—É–¥–µ—Ç –ø–µ—á–∞—Ç—å?'))
        else:
            bot.edit_message_caption('ü•∫ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª —É–∂–µ –Ω–µ–ª—å–∑—è...',
                                     chat_id=chat_id, message_id=message_id)

    elif call_data.startswith('edit_watermark'):
        if Path(INPUT_PATH / str(chat_id) / (str(message_id) + '.json')).is_file():

            output_file = make_image(chat_id, message_id)

            edit_message(chat_id=chat_id, message_id=message_id,
                         reply_markup=color_markup(load_image_settings(chat_id, message_id,
                                                                       'watermark', 'Watermark-White.png')),
                         media=types.InputMediaPhoto(output_file, caption='üñç –ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å–¥–µ–ª–∞–µ–º –ø–µ—á–∞—Ç—å?'))
        else:
            bot.edit_message_caption('ü•∫ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª —É–∂–µ –Ω–µ–ª—å–∑—è...',
                                     chat_id=chat_id, message_id=message_id)

    elif call_data.startswith('watermark:'):
        if Path(INPUT_PATH / str(chat_id) / (str(message_id) + '.json')).is_file():
            save_image_settings(chat_id, message_id,
                                key=call_data.split(':')[0],
                                value=call_data.split(':')[1])

            output_file = make_image(chat_id, message_id)

            edit_message(chat_id=chat_id, message_id=message_id,
                         reply_markup=color_markup(call_data.split(':')[1]),
                         media=types.InputMediaPhoto(output_file, caption='üñç –ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å–¥–µ–ª–∞–µ–º –ø–µ—á–∞—Ç—å?'))
        else:
            bot.edit_message_caption('ü•∫ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª —É–∂–µ –Ω–µ–ª—å–∑—è...',
                                     chat_id=chat_id, message_id=message_id)

    elif call_data.startswith('edit_image'):
        if Path(INPUT_PATH / str(chat_id) / (str(message_id) + '.json')).is_file():

            output_file = make_image(chat_id, message_id)

            edit_message(chat_id=chat_id, message_id=message_id,
                         reply_markup=image_markup(),
                         media=types.InputMediaPhoto(output_file, caption='üíà –ö–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑–º–µ–Ω–∏—Ç—å?'))
        else:
            bot.edit_message_caption('ü•∫ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª —É–∂–µ –Ω–µ–ª—å–∑—è...',
                                     chat_id=chat_id, message_id=message_id)

    elif call_data.startswith('image:'):
        if Path(INPUT_PATH / str(chat_id) / (str(message_id) + '.json')).is_file():
            if call_data.split(':')[1] == 'saturation':
                factor = load_image_settings(chat_id, message_id, 'saturation', 1)
                abjustment = call_data.split(':')[2]

                if abjustment == 'add':
                    factor += 0.1
                    bot.answer_callback_query(call.id, '–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞')
                elif abjustment == 'reduce':
                    factor -= 0.1
                    bot.answer_callback_query(call.id, '–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞')
                elif abjustment == 'reset':
                    factor = 1
                    bot.answer_callback_query(call.id, '–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞')

                save_image_settings(chat_id, message_id,
                                    key='saturation',
                                    value=factor)

            elif call_data.split(':')[1] == 'contrast':
                factor = load_image_settings(chat_id, message_id, 'contrast', 1)
                abjustment = call_data.split(':')[2]

                if abjustment == 'add':
                    factor += 0.05
                    bot.answer_callback_query(call.id, '–ö–æ–Ω—Ç—Ä–∞—Å—Ç —É–≤–µ–ª–∏—á–µ–Ω')
                elif abjustment == 'reduce':
                    factor -= 0.05
                    bot.answer_callback_query(call.id, '–ö–æ–Ω—Ç—Ä–∞—Å—Ç —É–º–µ–Ω—å—à–µ–Ω')
                elif abjustment == 'reset':
                    factor = 1
                    bot.answer_callback_query(call.id, '–ö–æ–Ω—Ç—Ä–∞—Å—Ç —Å–±—Ä–æ—à–µ–Ω')

                save_image_settings(chat_id, message_id,
                                    key='contrast',
                                    value=factor)

            elif call_data.split(':')[1] == 'brightness':
                factor = load_image_settings(chat_id, message_id, 'brightness', 1)
                abjustment = call_data.split(':')[2]

                if abjustment == 'add':
                    factor += 0.05
                    bot.answer_callback_query(call.id, '–Ø—Ä–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞')
                elif abjustment == 'reduce':
                    factor -= 0.05
                    bot.answer_callback_query(call.id, '–Ø—Ä–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞')
                elif abjustment == 'reset':
                    factor = 1
                    bot.answer_callback_query(call.id, '–Ø—Ä–∫–æ—Å—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞')

                save_image_settings(chat_id, message_id,
                                    key='brightness',
                                    value=factor)

            elif call_data.split(':')[1] == 'sharpness':
                factor = load_image_settings(chat_id, message_id, 'sharpness', 1)
                abjustment = call_data.split(':')[2]

                if abjustment == 'add':
                    factor += 0.5
                    bot.answer_callback_query(call.id, '–†–µ–∑–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞')
                elif abjustment == 'reduce':
                    factor -= 0.5
                    bot.answer_callback_query(call.id, '–†–µ–∑–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞')
                elif abjustment == 'reset':
                    factor = 1
                    bot.answer_callback_query(call.id, '–†–µ–∑–∫–æ—Å—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞')

                save_image_settings(chat_id, message_id,
                                    key='sharpness',
                                    value=factor)

            elif call_data.split(':')[1] == 'mark_size':

                bot.answer_callback_query(call.id, '–†–∞–∑–º–µ—Ä –ø–µ—á–∞—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω')

                save_image_settings(chat_id, message_id,
                                    key='mark_size',
                                    value=call_data.split(':')[2])

            output_file = make_image(chat_id, message_id)
            try:
                edit_message(chat_id=chat_id, message_id=message_id,
                             reply_markup=image_markup(),
                             media=types.InputMediaPhoto(output_file, caption='üíà –ö–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑–º–µ–Ω–∏—Ç—å?'))
            except Exception as e:
                telebot.logger.error(e)
        else:
            bot.edit_message_caption('ü•∫ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª —É–∂–µ –Ω–µ–ª—å–∑—è...',
                                     chat_id=chat_id, message_id=message_id)

    elif call_data.startswith('download'):
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        bot.send_chat_action(chat_id, 'upload_photo')

        output_file = make_image(chat_id, message_id, lightweight=False)

        photo = open(output_file, 'rb')

        telebot.logger.info('Send finish image ({data}) to {name} ({chat_id}).'.format(name=call.message.chat.username,
                                                                                       data=call_data,
                                                                                       chat_id=chat_id))
        edit_message(chat_id=chat_id, message_id=message_id,
                     reply_markup=download_markup(call_data.split(':')[1]),
                     media=types.InputMediaDocument(photo,
                                                    caption='üéâ –ì–æ—Ç–æ–≤–æ, –º–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!'))

        # –≠—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ –±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –∏ –µ—Å–ª–∏ –æ–Ω–æ —Å—Ç–∏–∫–µ—Ä, —Ç–æ —Å—Ç–∏–∫–µ—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è...
        if not Path(MAIN_PATH / 'messages' / str(chat_id)).exists():
            Path(MAIN_PATH / 'messages' / str(chat_id)).touch()

        with open(str(MAIN_PATH / 'messages' / str(chat_id)), 'r+') as last_message_file:
            try:
                last_message = json.load(last_message_file)
            except json.decoder.JSONDecodeError:
                last_message = dict()

            if last_message.get('sticker') is None:
                if randint(0, 5) == 0:
                    last_message = bot.send_sticker(chat_id=chat_id,
                                                    data=RANDOM_STICKERS[randint(0, len(RANDOM_STICKERS)-1)])
                    last_message_file.seek(0)
                    last_message_file.write(json.dumps(last_message.json, indent=2))
                    last_message_file.truncate()

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
        delete_old_files(chat_id)
    elif call_data.startswith('empty'):
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Ö –∂–µ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
        bot.answer_callback_query(call.id, '–≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä —É–∂–µ –≤—ã–±—Ä–∞–Ω! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π üòâ')


def main():
    bot.infinity_polling(timeout=60)


if __name__ == '__main__':
    main()
